// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/d/migrate-shadow
  relationMode      = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum UserRole {
  User
  Admin
  SuperAdmin
}

enum UserStatus {
  Inactive
  Actived
  Blocked
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  role          UserRole   @default(User)
  status        UserStatus @default(Actived)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  accounts Account[]
  sessions Session[]

  roomInvites      RoomInvite[]
  roomParticipants RoomParticipant[]
  rooms            Room[]
  chatTokens       ChatToken[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// For room manager

model Room {
  id       String  @id @default(cuid())
  name     String
  passcode String?
  record   Boolean @default(false)
  ownerId  String

  active Boolean @default(true)

  owner User @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  invites      RoomInvite[]
  participants RoomParticipant[]
  messages     Messages[]

  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  ChatChannel ChatChannel?

  @@index([ownerId])
}

model RoomInvite {
  id     String @id @default(cuid())
  roomId String
  email  String

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  validUntil DateTime

  room Room  @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user User? @relation(fields: [email], references: [email], onDelete: Cascade)

  @@unique([roomId, email])
  @@index([email, validUntil])
}

model RoomParticipant {
  id        String   @id @default(cuid())
  roomId    String
  name      String
  userId    String?
  joinedAt  DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  room     Room       @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user     User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages Messages[]

  // Is accepted by room owner to join
  accepted Boolean @default(false)

  @@index([roomId])
  @@index([userId])
}

enum MessageType {
  TEXT
  IMAGE
  VIDEO
  AUDIO
  FILE
}

model Messages {
  id            String      @id @default(cuid())
  roomId        String
  participantId String
  content       String
  type          MessageType @default(TEXT)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  room        Room            @relation(fields: [roomId], references: [id], onDelete: Cascade)
  participant RoomParticipant @relation(fields: [participantId], references: [id], onDelete: Cascade)

  @@index([roomId])
  @@index([participantId])
}

model ChatToken {
  id           String   @id @default(cuid())
  gUserId      String
  userId       String?
  projectId    String?
  accessToken  String?  @db.Text
  refreshToken String?  @db.Text
  expiresAt    Int?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [gUserId], references: [id], onDelete: Cascade)

  @@index([gUserId]) // Index để tìm kiếm theo gUserId
}

model ChatChannel {
  id        String   @id @default(cuid())
  channelId String   @unique
  channelType String 
  roomId    String   
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([roomId])
}
